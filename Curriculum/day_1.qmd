---
title: "Day 1"
format: html
---

::: objectives
-   Identify purpose and scope of workshop
-   Learn how R markdown can be used to enhance `asar` reports
-   Understand how Quarto is used to structure an `asar` report
-   Install software necessary to build an `asar` report
:::

# Introduction
## Icebreaker

Welcome! Please open the [Day 1 communal notes doc](https://docs.google.com/document/d/1SY-xwHXnJUXSXTTeaPA_UkmXXVmUK9Ol751nh6Vtjmg/edit?usp=sharing) and participate in the icebreaker exercise.

## Code of conduct

Everyone participating in this workshop is required to abide by the terms of our [Code of Conduct](https://github.com/nmfs-ost/asar/blob/main/CODE_OF_CONDUCT.md). We encourage you to contribute to a positive environment for our community by:

-   Demonstrating empathy and kindness toward other people
-   Being respectful of differing opinions, viewpoints, and experiences
-   Giving and gracefully accepting constructive feedback
-   Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience
-   Focusing on what is best not just for us as individuals, but for the overall community

If you believe that someone is in violation of the Code of Conduct, please report the incident to our community leaders responsible for enforcement using [this form](https://docs.google.com/forms/d/e/1FAIpQLSftcxC8XuyoXJzrNS8cM8fXvuRWo1hnyS3TtI_VlM-XFmMYGQ/viewform).

## Who are we?

Sam Schiano and Sophie Breitbart are contractors with ECS Federal working in support of the NOAA Fisheries National Stock Assessment Program. Our work primarily focuses on stock assessment workflows by creating tools to help stock assessment scientists increase throughput. We are developing two R packages, `asar` and `stockplotr`, using an open science framework that prioritizes transparency and reproducibility.

## Materials for today's lesson

-   [Day 1 communal notes doc](https://docs.google.com/document/d/1SY-xwHXnJUXSXTTeaPA_UkmXXVmUK9Ol751nh6Vtjmg/edit?usp=sharing)
    -   Contains areas for taking notes and definitions for jargon
-   [JupyterHub workshop server](https://workshop.nmfs-openscapes.2i2c.cloud)
    -   Environment where you can code along with us, if you'd prefer
    -   All necessary packages are already installed
    -   Username: your email
    -   Password: *ask us*
-   [Sample data](https://github.com/nmfs-ost/asar/blob/main/inst/extdata/Report.sso)
    -   Sample model output data for coding demonstrations

## How to engage with us

**Questions**: Please raise your hand, or write your question in the chat, at any time. Depending on our schedule, we may ask that you save larger questions for breaks.

## Workshop overview
### Purpose and benefits to you

By the end of this workshop, we hope that you come away with the knowledge and confidence to write your next stock assessment report using a *reproducible, efficient, and transparent workflow based on `asar` and `stockplotr`*.

An `asar` workflow can help ease the following challenges:

#### Challenges faced by stock assessment scientists

- Achieving accessibility standards (section 508 compliance)
- Iteratively changing a report during review
- Meeting variable expectations for report structure and language
- Following structure of inherited assessments
- Collaborating

#### Challenges from a national perspective

- Differences in reporting among regions
- Divergent expectations from associated councils

::: {.callout-note}
We have communicated with representatives from each council and all have expressed support for our proposed standardized report template.
:::

### Scope of workshop

During this workshop, we will cover the following topics:

- Markdown language
- Quarto basics
- How to set up a reporting workflow using `asar`
- How to create semi-automated figures and tables with `stockplotr` 

### Overview of `asar`-based reporting workflow

Main steps for creating a stock assessment report with `asar`:

1. Install packages
2. Convert model output into format usable by `asar`
3. Create the report skeleton
4. Make child docs containing figures and tables (made with `stockplotr` or by other means)
5. Fill in child docs with text
6. Render report
7. Add accessibility features (PDF tags and alternative text for figures)

::: {.callout-tip}
Open the [`asar` cheatsheet](https://nmfs-ost.github.io/asar/asar_cheatsheet.pdf) for a visual overview of the main workflow!
:::

# Markdown

::: {.callout-note}
Follow along with our demo!
:::

### What is markdown?

[According to RStudio](https://rmarkdown.rstudio.com/articles_intro.html), markdown is "an easy-to-write plain text format"; not exactly a language, but a formatting style. 

### Why use R markdown?

R markdown, or "Rmd" for short, allows you to create amazingly dynamic reports. With R markdown, you can embed your R code directly into your documents. When you "knit" the document, the code is executed, and the results— like figures, tables, parameters, citations, and other outputs— are automatically inserted into the final report.

A major reason why R markdown is incredibly useful: it *saves time and reduces errors*. If your data changes, you don't have to manually rerun your analysis and copy/paste the results. You just re-knit the document, and everything is updated automatically.

### Opening an Rmd document

Let's open a new R markdown document.

1.  In RStudio, go to **File \> New File \> R Markdown...**.
2.  A dialog box will appear. If you wish, you can give your document a title and author.
3.  For the output format, you can select HTML, PDF, or Word. Let's choose HTML.
4.  Click **OK**.

You'll now see a new R Markdown file with some default text. Let's explore some ways you can take advantage of this powerful document type.

### The core components

1.  **The YAML Header:** This is the section at the top of the file, enclosed by triple dashes (`---`). It contains metadata about the document, like the title, author, and output format.
2.  **Text and Formatting:** This is where you'll write the narrative of your report using Markdown syntax.
3.  **Code Chunks:** These are sections of the document where you can embed and run your R code.

### Common uses in `asar` reports

Now, let's dive into some of the most common features you'll be using when creating `asar` reports.

#### Parameters

Parameters allow you to create dynamic reports. You can define parameters in the YAML header and then reference them in your text and code.

For example, you could have a parameter for the species you're writing about:

```{r eval=FALSE}
---
title: "Stock Assessment Report"
author: "Patrick Star"
date: today
params:
  species: "Petrale sole"
---
```

Then, in the body of your report, you can reference this parameter like this:

"The native range of \`params\$species\` spans from..."

When you knit the document, \`params\$species\` will be replaced with "Petrale sole".

#### Formatting

R Markdown uses a simple syntax for formatting your text. Here are some of the most common formatting options:

  * **Headers**
      * `#` signifies a top-level header
      * `##` signifies a second-level header (etc.)
  * **Emphasis**
      * `*italic*` for *italic* text
      * `**bold**` for **bold** text
  * **Lists**
      * **Unordered lists:** Use `*` or `-` at the beginning of a line.
      * **Ordered lists:** Use numbers followed by a period.
  * **Links**
      * `[link text](URL)`

#### Math and Equations

You can include LaTeX-style math equations in your report.

  * **Inline math:** Wrap your equation in single dollar signs: `$A = \pi * r^2$`
  * **Block equations:** Wrap your equation in double dollar signs to display it on its own line:
    ```
    $$
    E = mc^2
    $$
    ```

#### References and Bibliography

You can easily add citations to your report. We provide an `asar_references.bib` file in the "report" folder with hundreds of citations for you to reference, though you can add your own to the file too.

To cite a reference in the text, use the `@` symbol followed by the citation key (e.g., `@Biddle_1992`). R Markdown will automatically format the citation and add it to the "References" section towards the end of your report.

**15 min break**

# Quarto

::: {.callout-note}
Follow along with our demo!
:::

## Why use Quarto for reports?

Quarto is an ideal platform for building reproducible reports, which are denoted with a .qmd (Quarto Markdown) extension type. Why?

* It allows you to combine narrative text, source code (like R), and the outputs of that code (like tables and figures) into a single, polished document.

* Anyone with the same files can reproduce that document, which goes a long way in promoting scientific integrity.

* You can produce reports in several formats like HTML, PDF, and Word.

## Skeleton setup

When you run `asar::create_template()`, you will receive a "report" folder with several files within it. One of the most important files is what we call the "skeleton": a .qmd file containing chunks that run *other* files, then places the rendered contents of those files within one report.

Those *other* files are what we call "child documents". For example, your report introduction will be written in a child document. Your figures and tables will be placed in respective child docs, too.

This setup avoids placing your entire report in one massive .qmd file, facilitates asynchronous collaboration with your colleagues, and keeps your project organized.

### Relative pathnames

::: {.callout-important}
Only files with paths relative to the Quarto doc will load!
:::

Quarto projects are self-contained such that it can only find files if you tell it where to look *relative to the location of the .qmd file*. To Quarto, the location of that .qmd file essentially becomes the root of your directory.

For example, imagine your project has this structure:

```verbatim
report/
├── SAR_species_skeleton.qmd
├── 01_executive_summary.qmd
├── 02_introduction.qmd
└── extra_data/
    └── red_fish.csv
    └── blue_fish.csv
```

To load 'red_fish.csv' inside SAR_species_skeleton.qmd, you would use a relative path:

```{r eval=FALSE}
my_data <- read.csv("extra_data/red_fish.csv")
```

This would work *even if your working directory is not the "report" folder.*

## YAML

The YAML is the block of text at the very top of your main .qmd file, enclosed by triple dashes (---). It provides metadata for your document-- i.e., how to build the report.

Common settings in the YAML include:

* title
* author
* date
* format (For `asar`, this will be PDF or HTML)

Here is an example of an `asar` YAML:

```{r eval=FALSE}
---
title: 'Stock Assessment Report Template'
author:
  - name: 'FIRST LAST'
    affiliations: 
      - name: 'NOAA Fisheries' 
        address: 'ADDRESS' 
        city: 'CITY' 
        state: 'STATE' 
        postal-code: 'POSTAL CODE' 
date: today
keep-tex: true 
mainfont: 'Latin Modern Sans' 
cover: 
pdf-engine: lualatex
format: 
  pdf: 
    documentclass: scrartcl
    papersize: letter
    number-sections: true
    template-partials:
      - 'support_files/before-body.tex'
      - 'support_files/_titlepage.tex'
    include-in-header:
      - 'support_files/in-header.tex'
    toc: true
    sansfont: 'Latin Modern Sans'
    lof: true
    lot: true
    titlepage-geometry: 
      - top=2in
      - bottom=1in
      - right=1in
      - left=1in
output-file: 'species_SAR_2025' 
params:
   office: ''
   species: 'species'
   spp_latin: ''
bibliography:  
  - asar_references.bib
csl: support_files/cjfas.csl
---
```

We will explore the components of the yaml in the Day 2 curriculum.
  
# Installation

::: {.callout-tip}
## Tip

The following packages are already installed in the `asar` workspace on JupyterHub, so if you are using that space, you can skip this section.
:::

We recommend using the [`pak` R package](https://pak.r-lib.org/) to install R packages where possible, since it avoids re-downloading files if they're already present.

## `tinytex`

We recommend installing the default "bundle" of LaTeX packages via `tinytex` because 1) it's faster and 2) R *should* automatically install also-necessary LaTeX packages when they are needed, in the moment.

```r
install.packages("pak")
pak::pkg_install("rstudio/tinytex")
```

If you'd prefer, you can install the full `tinytex` bundle to ensure that all LaTeX packages will be present when you need them. This will take longer to install.

```r
install.packages("pak")
pak::pkg_install("rstudio/tinytex")
tinytex::install_tinytex(bundle = "TinyTeX-2")
```

## `asar`

Then, install `asar`.

```r
install.packages("pak")
pak::pak("nmfs-ost/asar")
```

Please see the [`asar` README](https://github.com/nmfs-ost/asar) for more installation options.

# Questions, comments, and feedback

Please navigate to the [Feedback](https://docs.google.com/document/d/1SY-xwHXnJUXSXTTeaPA_UkmXXVmUK9Ol751nh6Vtjmg/edit?tab=t.0#heading=h.llbcc8tygqlb) heading and tell us what you thought about today's workshop. Only 3 simple questions!

* What went well?
* What could be improved?
* What is a question you still have?