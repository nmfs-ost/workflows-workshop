---
title: "Day 3"
format: html
---

::: objectives
-   Work through a guided demo of a more complex `asar` workflow
-   Learn about the value of the `stockplotr` R package
-   Understand how to integrate `stockplotr` into an `asar`-based reporting workflow
-   Work through a guided demo of a basic `stockplotr` workflow
:::

# Introduction
## Icebreaker

Welcome! Please open the [Day 3 communal notes doc](https://docs.google.com/document/d/1SY-xwHXnJUXSXTTeaPA_UkmXXVmUK9Ol751nh6Vtjmg/edit?tab=t.vffehz79fm7y#heading=h.sfq3xaeehv64) and participate in the icebreaker exercise.

# Introduction to `stockplotr`

## Installation

::: {.callout-tip}
### Tip

The following packages are already installed in the `asar` workspace on JupyterHub, so if you are using that space, you can skip this section.
:::

```r
install.packages("pak")
pak::pak("nmfs-ost/stockplotr")
```

Please see the [`stockplotr` README](https://github.com/nmfs-ost/stockplotr) for more installation options.

## `stockplotr` workflow: Basic example

### Convert output (if necessary)

First, you'll need to convert your model results using the same workflow covered yesterday: `asar::convert_output()`.

You can use the example Report.sso file uploaded to the workshop GitHub or, if you have a compatible output file, your own.

```{r}
#| label: conout-ex
#| eval: true
#| warning: false
#| messages: false
# Identify output file
output_file <- here::here("example_output", "Report.sso")
# convert the output
petrale <- asar::convert_output(output_file)
```

If you have already converted your output: great! Import it into your R environment so that you can handle it as an object like "petrale" in the chunk above.

### Create single plots

- Export single plots
- Create and export all plots
- How to customize (changing color palette, etc.)

# Integrating stockplotr in the workflows

## `asar::create_tables_doc`

After running `create_template()`, a blank tables quarto file is created. It contains a statement to refer to {stockplotr} to add pre-made tables. You will learn more of that tomorrow, but for now we are going to go over how you add your own tables to the document.

Steps for adding a table:

    1. Create a code chunk
    2. Add your label and other options
    3. Add code
    4. Write caption

**Add a code chunk for each table**

```{r}
#| label: tbl-example
#| eval: true
#| echo: true
#| warning: false
#| tbl-cap: This is my caption for the example table.
head(petrale) |>
    dplyr::select(label, year, estimate) |>
    flextable::flextable()
```

::: {.callout-tip}
It will be important to add your captions and labels into an excel file when making your documents accessible. You will learn more about this excel file and accessibility tomorrow!
:::

### Non-code Tables

In the case you have made a table not using code, you can add it as an image. While this is not generally recommended since it significaly reduces the accessibility of your table, we understand that sometimes this is the only format you have it in.

Use the following notation to reference an external table as an image:

`![Caption for my example table](example_table.png){fig-alt="This is the alternative text for my table", #tbl-example}`

::: {.callout-note}
Notice how there is alternative text added to this method of adding a table. In this scenario, the table is recognized as an image and thus would NOT pass accessibility checks. Please make sure you add alternative text for tables added in this way.
:::

## `asar::create_figures_doc`

Like with our tables file, a blank figures quarto file is created. It contains a statement to refer to {stockplotr} to add pre-made figures.

Steps for adding a figure:

    1. Create a code chunk
    2. Add your label and other options
    3. Add code
    4. Write caption and **alternative text**

[**Highlight the difference with a figure needing alternative text**]

**Add a code chunk for each table**

```{r}
#| label: fig-example
#| eval: true
#| echo: true
#| warning: false
#| fig-cap: This is my caption for the example table.
#| fig-alt: This is my alternative text for an HTML doc.
plot(cars$speed, cars$dist)
```

::: {.callout-tip}
It will be important to add your captions and labels into an excel file when making your documents accessible. You will learn more about this excel file and accessibility tomorrow!
:::

###### Non-code Figures

Like tables, you can reference figures not made directly in code chunks. However, in this case, this does not change the accessibility of the figure as much because you as the user can still add the necessary components to meet section 508 standards.

`![Caption for my example figure](example_figure.png){fig-alt="This is the alternative text for my figure", #fig-example}`

##### Referencing your tables or figures in text

Quarto uses a special notation to allow users to link tables and figures throughout their text. Use the following notation to link/reference tables in your text:

"@tbl-example" or "@fig-example"

By adding an @ symbol followed by the chunk label or just label of your table/figure will create an interactive link that lets the reader navigate to that specific table/figure.

[Show working example within positron]

**Put it all together!**

Render your entire document and take a look at what we've made today.

## Adding accessibility



# Demo for a realistic, customized asar report with stockplotr plots

- create_tables_doc() and create_figures_doc() with "figures" and "tables" folders
- ensure alt text/captions work

**Time to practice, ask questions, etc.**

# Questions, comments, and feedback

Please navigate to the [Feedback](https://docs.google.com/document/d/1SY-xwHXnJUXSXTTeaPA_UkmXXVmUK9Ol751nh6Vtjmg/edit?tab=t.vffehz79fm7y#heading=h.llbcc8tygqlb) heading and tell us what you thought about today's workshop. Only 3 simple questions!

* What went well?
* What could be improved?
* What is a question you still have?